import clamav from 'clamav.js';
import fetch from 'node-fetch';
import fs from 'fs';
import path from 'path';

const MAX_FILE_SIZE = 100 * 1024 * 1024; // 100 MB
const CLAMAV_PORT = 3310;
const CLAMAV_HOST = 'clamav';

export async function scanFile(sasUrl) {
  let tempFilePath;

  try {
    console.log(`Starting scan for file from SAS URL: ${sasUrl}`);

    // Fetch the file from the SAS URL
    const response = await fetch(sasUrl);
    if (!response.ok) {
      throw new Error(`File fetch failed: ${response.statusText}`);
    }

    const buffer = await response.arrayBuffer();
    if (buffer.byteLength > MAX_FILE_SIZE) {
      throw new Error('File exceeds maximum allowed size');
    }

    // Prepare temporary file and directory for scanning
    const tempDir = fs.mkdtempSync(path.join('/tmp/clamav-scans', 'clamav-scan-'));
    tempFilePath = path.join(tempDir, 'temp-file-to-scan');
    fs.writeFileSync(tempFilePath, Buffer.from(buffer));

    console.log(`Temporary file created at ${tempFilePath}`);

    // Initialize ClamAV scanner
    const scanner = clamav.createScanner(CLAMAV_PORT, CLAMAV_HOST);

    return new Promise((resolve, reject) => {
      const fileStream = fs.createReadStream(tempFilePath);
      scanner.scan(fileStream, async (err, object, isInfected) => {
        try {
          // Cleanup temporary file and directory after scanning
          await fs.promises.unlink(tempFilePath);
          await fs.promises.rm(tempDir, { recursive: true });
          console.log(`Temporary files cleaned up at ${tempFilePath}`);
        } catch (cleanupErr) {
          console.error('Cleanup error:', cleanupErr);
        }

        if (err) {
          console.error('ClamAV scan error:', err);
          reject(new Error(`Scan failed: ${err.message}`));
        } else {
          console.log(`Scan result for ${object}: ${isInfected ? 'Infected' : 'Clean'}`);
          resolve(isInfected ? `Virus detected in file` : 'No viruses detected');
        }
      });
    });
  } catch (err) {
    console.error('Error during scan:', err);
    throw new Error('Scan failed: ' + err.message);
  }
}