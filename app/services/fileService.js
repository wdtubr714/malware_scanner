import fs from 'fs';
import path from 'path';
import { BlobServiceClient } from '@azure/storage-blob';
import { getSecret } from './secretManager.js';

const __dirname = path.resolve();
const quarantineFolder = path.join(__dirname, '..', '..', 'uploads', 'quarantine');

export async function moveToQuarantine(sasUrl, fileName) {
  if (process.env.NODE_ENV === 'production') {
    return moveToQuarantineProduction(sasUrl, fileName);
  } else {
    return moveToQuarantineDevelopment(sasUrl, fileName);
  }
}

async function moveToQuarantineProduction(sasUrl, fileName) {
  try {
    let connectionString;
    try {
      connectionString = await getSecret('DATALAKE-CONNECT');
    } catch (error) {
      console.error('Error retrieving secret:', error);
      throw new Error('Failed to retrieve storage connection string');
    }

    const blobServiceClient = BlobServiceClient.fromConnectionString(connectionString);
    const containerClient = blobServiceClient.getContainerClient('quarantine');
    await containerClient.createIfNotExists();

    const sourceBlob = blobServiceClient.getBlobClient(sasUrl);
    const destinationBlob = containerClient.getBlockBlobClient(fileName);

    await destinationBlob.beginCopyFromURL(sourceBlob.url);
    await sourceBlob.delete();

    console.log(`File ${fileName} moved to quarantine in production.`);
  } catch (error) {
    console.error(`Error moving file to quarantine in production: ${error.message}`);
    throw error;
  }
}

function moveToQuarantineDevelopment(sasUrl, fileName) {
  return new Promise((resolve, reject) => {
    const quarantinePath = path.join(quarantineFolder, fileName);

    fs.mkdir(quarantineFolder, { recursive: true }, (err) => {
      if (err) {
        console.error(`Error creating quarantine folder: ${err.message}`);
        reject(err);
        return;
      }

      fs.writeFile(quarantinePath, `Quarantined file: ${fileName}, SAS URL: ${sasUrl}`, (err) => {
        if (err) {
          console.error(`Error writing quarantine file: ${err.message}`);
          reject(err);
        } else {
          console.log(`[DEV] File ${fileName} marked for quarantine. SAS URL: ${sasUrl}`);
          resolve();
        }
      });
    });
  });
}