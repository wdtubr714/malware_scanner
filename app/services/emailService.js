import nodemailer from 'nodemailer';
import sgMail from '@sendgrid/mail';

let sendGridApiKey;

export async function initialize(apiKey) {
  sendGridApiKey = apiKey;
  if (process.env.NODE_ENV === 'production') {
    sgMail.setApiKey(sendGridApiKey);
  }
}

export async function sendEmail(to, fileName, status, quarantineMessage, userName) {
  if (!to || !fileName || !status || !userName) {
    console.error('Missing required parameters for sending email');
    return;
  }

  const maxRetries = 3;
  let retries = 0;

  while (retries < maxRetries) {
    try {
      if (process.env.NODE_ENV === 'development') {
        await sendDevelopmentEmail(to, fileName, status, quarantineMessage, userName);
      } else {
        await sendProductionEmail(to, fileName, status, quarantineMessage, userName);
      }
      console.log(`Email sent successfully to ${to}`);
      return;
    } catch (error) {
      console.error(`Attempt ${retries + 1} failed:`, error.message);
      retries++;
      if (retries === maxRetries) {
        console.error('Max retries reached. Email sending failed.');
      } else {
        console.log(`Retrying in ${retries * 2} seconds...`);
        await new Promise(resolve => setTimeout(resolve, retries * 2000));
      }
    }
  }
}

async function sendDevelopmentEmail(to, fileName, status, quarantineMessage, userName) {
  const transporter = nodemailer.createTransport({
    host: process.env.DEV_SMTP_HOST || "mailhog",
    port: process.env.MAILHOG_SMTP_PORT || 1025,
    secure: false
  });
  
  const mailOptions = {
    from: process.env.DEV_FROM_EMAIL || 'liam@incite.ag',
    to: to,
    subject: `[DEV] File Scan Result: ${fileName} - ${status}`,
    html: `
      <h1>File Scan Result</h1>
      <p><strong>File:</strong> ${fileName}</p>
      <p><strong>Status:</strong> ${status}</p>
      <p><strong>Message:</strong> ${quarantineMessage}</p>
      <p><strong>User:</strong> ${userName}</p>
      <p><em>This is a development email sent from the local environment.</em></p>
    `
  };

  await transporter.sendMail(mailOptions);
  console.log(`[DEV] Email sent to ${to}`);
}

async function sendProductionEmail(to, fileName, status, quarantineMessage, userName) {
  if (!sendGridApiKey) {
    throw new Error('SendGrid API key not initialized');
  }

  const msg = {
    to,
    from: process.env.SENDGRID_FROM_EMAIL,
    templateId: process.env.SENDGRID_TEMPLATE_ID,
    dynamic_template_data: {
      fileName,
      status,
      quarantineMessage,
      userName,
    },
  };

  await sgMail.send(msg);
  console.log(`[PROD] Email sent to ${to} using SendGrid`);
}