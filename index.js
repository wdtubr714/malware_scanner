import express from 'express';
import * as scanController from './app/controller/scanController.js';
import * as emailService from './app/services/emailService.js';
import { getSecret } from './app/services/secretManager.js';

const app = express();
const port = process.env.PORT || 3001;
const nodeEnv = process.env.NODE_ENV || 'development';

app.use(express.json());

async function initializeSecrets() {
  try {
    if (nodeEnv === 'production') {
      const sendGridApiKey = await getSecret('SENDGRID-API-KEY');
      await emailService.initialize(sendGridApiKey);
    } else {
      await emailService.initialize(process.env.SENDGRID_API_KEY);
    }
    console.log("Email service initialized successfully.");
  } catch (error) {
    console.error("Error initializing email service:", error);
  }
}

app.post('/upload', async (req, res) => {
  const { sasUrl, email, userName, fileName, fileSize } = req.body;
  if (!sasUrl || !email || !userName || !fileName || !fileSize) {
    return res.status(400).json({ message: 'Missing required parameters.' });
  }
  try {
    await scanController.handleScanResult(fileName, sasUrl, fileSize, email, userName);
    res.status(200).json({ message: 'Scan complete. Check email for results.' });
  } catch (error) {
    console.error('Error in /upload:', error);
    res.status(500).json({ message: 'An error occurred during scanning.' });
  }
});

app.listen(port, async () => {
  console.log(`Server running in ${nodeEnv} mode on port ${port}`);
  try {
    await initializeSecrets();
    console.log('All services are initialized and healthy.');
  } catch (error) {
    console.error('Error initializing services:', error);
  }
});